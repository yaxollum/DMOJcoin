#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct large_int
{
	bool positive;
	vector<int> digits;
	void input_digits();
	void output_digits();
	void add_other(const vector<int>& odigits);
	void sub_other(vector<int>& odigits);
	bool abs_larger_than(const vector<int>& odigits);
	void add_other_generic(large_int & other);
	large_int() :positive(true) {}
};

void large_int::input_digits()
{
	string temp;
	cin >> temp;
	digits.reserve(temp.length() + 10);

	auto te = temp.rend();
	if (temp[0] == '-')
	{
		--te;
		positive = false;
	}
	
	for (auto it = temp.rbegin(); it != te; ++it)
	{
		digits.push_back(*it - 48);
	}
}

void large_int::output_digits()
{
	auto de = digits.rend();

	bool started = false;
	for (auto it = digits.rbegin(); it != de; ++it)
	{
		if (started) cout << *it;
		else if (*it != 0)
		{
			if (!positive) cout << '-';
			cout << *it;
			started = true;
		}
	}
	if (!started) cout << 0;
	cout << endl;
}

void large_int::add_other(const vector<int>& odigits)
{
	int msize = digits.size();
	int osize = odigits.size();

	if (osize > msize)
	{
		digits.resize(osize + 1);
	}
	else
	{
		digits.resize(msize + 1);
	}

	for (int i = 0; i < osize; ++i)
	{
		digits[i] += odigits[i];
		if (digits[i] >= 10)
		{
			digits[i] -= 10;
			++digits[i + 1];
		}
	}
}

void large_int::sub_other(vector<int>& odigits)
{
	odigits.resize(digits.size());
	int osize = odigits.size();

	for (int i = 0; i < osize; ++i)
	{
		digits[i] -= odigits[i];
		if (digits[i] < 0)
		{
			digits[i] += 10;
			--digits[i + 1];
		}
	}
}

bool large_int::abs_larger_than(const vector<int>& odigits)
{
	int msize = digits.size();
	int osize = odigits.size();

	if (msize > osize) return true;
	else if (msize < osize) return false;
	else
	{
		for (int i = osize - 1; i >= 0; --i)
		{
			if (digits[i] > odigits[i]) return true;
			else if (digits[i] < odigits[i]) return false;
		}
	}
	return false;
}

void large_int::add_other_generic(large_int& other)
{
	if ((positive&&other.positive) || (!positive && !other.positive))
	{
		add_other(other.digits);
		output_digits();
	}
	else
	{
		bool abs_larger = abs_larger_than(other.digits);
		if (positive && !other.positive)
		{
			if (abs_larger)
			{
				sub_other(other.digits);
				output_digits();
			}
			else
			{
				other.sub_other(digits);
				other.output_digits();
			}
		}
		else if (!positive&&other.positive)
		{
			if (abs_larger)
			{
				sub_other(other.digits);
				output_digits();
			}
			else
			{
				other.sub_other(digits);
				other.output_digits();
			}
		}
	}
}
int main()
{
	int n;
	cin >> n;

	for (int loop = 0; loop < n; ++loop)
	{
		large_int num1, num2;
		num1.input_digits();
		num2.input_digits();
		num1.add_other_generic(num2);
	}
}