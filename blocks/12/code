#include <iostream>
#include <vector>

using namespace std;

struct visited_step
{
	bool _visited;
	int _step;

	visited_step() :_visited(false), _step(0) {}
};

struct out
{
	vector<int> _dat;
	int _out_n;
};

struct book
{
	int _pages_n;
	int _current_step;
	int _end_dist;
	bool _reached_end;
	vector<out> _pages_out;
	vector<visited_step> _pages_visited;
	book(int pages_val) :
		_pages_out(pages_val + 1), 
		_pages_n(pages_val), 
		_pages_visited(pages_val+1), 
		_current_step(1),_end_dist(0),
		_reached_end(false) {}

	void input_pages();
	bool step_all();
	void print_answer(ostream& out);
};

void book::input_pages()
{
	int outs;
	_pages_visited[1]._visited = true;
	_pages_visited[1]._step = 1;

	for (int page = 1; page <= _pages_n; ++page)
	{
		cin >> outs;

		out& this_page = _pages_out[page];
		
		this_page._out_n = outs;
		this_page._dat.resize(outs);

		for (int i = 0; i < outs; ++i)
		{
			cin >> this_page._dat[i];
		}
	}
}

bool book::step_all()
{
	bool updated = false;
	for (int page = 1; page <= _pages_n; ++page)
	{
		if (_pages_visited[page]._visited && _pages_visited[page]._step == _current_step)
		{
			out& other_pages =_pages_out[page];
			if (other_pages._out_n == 0 && !_reached_end)
			{
				_reached_end = true;
				_end_dist = _current_step;
			}
			else
			{
				for (int i = 0; i < other_pages._out_n; ++i)
				{
					visited_step& other_page = _pages_visited[other_pages._dat[i]];
					if (!other_page._visited)
					{
						other_page._step = _current_step + 1;
						other_page._visited = true;
						updated = true;
					}
				}
			}
		}
	}
	++_current_step;
	return updated;
}

void book::print_answer(ostream& out)
{
	bool all_visited = true;
	for (int page=1; page<=_pages_n; ++page)
	{
		if (!_pages_visited[page]._visited)
		{
			all_visited = false;
			break;
		}
	}
	out << (all_visited ? 'Y' : 'N') << endl;
	out << _end_dist;
}

int main()
{
	int pages_n;
	cin >> pages_n;

	book bb(pages_n);
	bb.input_pages();

	while (bb.step_all());

	bb.print_answer(cout);
}