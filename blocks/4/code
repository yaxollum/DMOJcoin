#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct matrix
{
	int _rows;
	int _cols;

	vector<vector<int>> _dat;
	matrix();
	void multiply(const matrix& other);
	void print_answer(ostream& out);
};

matrix::matrix()
{
	cin >> _rows;
	cin >> _cols;
	_dat.resize(_rows, vector<int>(_cols));

	for (int i = 0; i < _rows; ++i)
	{
		for (int j = 0; j < _cols; ++j)
		{
			cin >> _dat[i][j];
		}
	}
}

void matrix::multiply(const matrix& other)
{
	int new_rows = _rows * other._rows;
	int new_cols = _cols * other._cols;
	vector<vector<int>> new_dat(new_rows,vector<int>(new_cols));
	for (int i = 0; i < new_rows; ++i)
	{
		for (int j = 0; j < new_cols; ++j)
		{
			new_dat[i][j] = _dat[i / other._rows][j / other._cols] * other._dat[i%other._rows][j%other._cols];
		}
	}

	_dat.swap(new_dat);
	_rows = new_rows;
	_cols = new_cols;
}

void matrix::print_answer(ostream& out)
{
	int total_max = _dat[0][0];
	int total_min = _dat[0][0];
	vector<int> row_sums(_rows);
	vector<int> col_sums(_cols);

	for (int i = 0; i < _rows; ++i)
	{
		for (int j = 0; j < _cols; ++j)
		{
			const int& item = _dat[i][j];

			if (item > total_max) total_max = item;
			if (item < total_min) total_min = item;
			
			row_sums[i] += item;
			col_sums[j] += item;
		}
	}
	out << total_max << endl;
	out << total_min << endl;
	out << *max_element(row_sums.begin(), row_sums.end()) << endl;
	out << *min_element(row_sums.begin(), row_sums.end()) << endl;
	out << *max_element(col_sums.begin(), col_sums.end()) << endl;
	out << *min_element(col_sums.begin(), col_sums.end()) << endl;
}

int main()
{
	int rep;
	cin >> rep;

	matrix original_matrix;

	for (int loop = 1; loop < rep; ++loop)
	{
		matrix new_matrix;
		original_matrix.multiply(new_matrix);
	}

	original_matrix.print_answer(cout);
}