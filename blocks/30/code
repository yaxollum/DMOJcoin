#include <stdio.h>
#include <iostream>
#include <queue>
#include <string>
#include <unordered_set>
#include <vector>
#include <numeric>

//#define DBUG

using namespace std;

int stacks[9];

struct cost
{
    string s;
    int i;
};

char* pp(string s)
{
    char* tt=new char[10]();
    for(int i=0;i<s.length();++i)
    {
        tt[i]=s[i]+'0';
    }
    return tt;
}

void get_left(string& ss,int cc,int n,queue<cost>& qq,unordered_set<string>& res)
{
    for(char i=1;i<n;++i)
    {
        int iMin = stacks[i];
        if(iMin<stacks[i-1])
        {
            --ss[iMin];
            if(res.find(ss)==res.end())
            {
                res.insert(ss);
                qq.push({ss,cc+1});
            }
            ++ss[iMin];
        }
    }
}

void get_right(string& ss,int cc,int n,queue<cost>& qq,unordered_set<string>& res)
{
    for(char i=0;i<n-1;++i)
    {
        int iMin = stacks[i];
        if(iMin<stacks[i+1])
        {
            ++ss[iMin];
            if(res.find(ss)==res.end())
            {
                res.insert(ss);
                qq.push({ss,cc+1});
            }
            --ss[iMin];
        }
    }
}

void test_left()
{
   queue<cost> q1;
   unordered_set<string> t1;
   string test={1,3,2,3};
   int n=5;
        for(char i=0;i<n;++i)
        {
            stacks[i]=10;
        }
        for(char i=n-1;i>=0;--i)
        {
            stacks[test[i]]=i;
        }



   get_left(test,2, n, q1, t1);
   get_right(test,2, n, q1, t1);
   n=4;
}


void bfs_solve(string& original,int n)
{
    unordered_set<string> res;
    queue<cost> qq;
    qq.push({original,0});
    res.insert(original);

    string target(n,0);
    iota(target.begin(),target.end(),0);

    int cc;
    cost qfront;

    while(!qq.empty())
    {
        qfront=qq.front();
        qq.pop();

        string& ss=qfront.s;
        cc=qfront.i;

        if(ss==target)
        {
            printf("%d\n",cc);
            return;
        }

        for(char i=0;i<n;++i)
        {
            stacks[i]=10;
        }
        for(char i=n-1;i>=0;--i)
        {
            stacks[ss[i]]=i;
        }

        get_left(ss,cc,n,qq,res);
        get_right(ss,cc,n,qq,res);
    }

    puts("IMPOSSIBLE");
}

#ifdef DBUG
int main()
{
  //  string test_string={2,2,2};
  //  bfs_solve(test_string,3);
    test_left();
}
#endif

#ifndef DBUG
int main()
{
    while(1)
    {
        int n;
        scanf("%d",&n);
        if(!n) break;

        string original(n,0x3f);
        int val;
        for(char i=0;i<n;++i)
        {
            scanf("%d",&val);
            original[val-1]=i;
        }

        bfs_solve(original,n);
    }
}
#endif