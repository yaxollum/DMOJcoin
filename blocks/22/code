#include <cstdio>
#include <vector>
#include <cmath>

#define MAX 100
#define MAX_SPEED 10
//#define FAIL { next_state=state_pos(-1); return; }

using namespace std;

int xmax,ymax;

bool restricted[MAX+1][MAX+1];
bool visited_states[MAX+1][MAX+1][MAX_SPEED+MAX_SPEED+1][MAX_SPEED+MAX_SPEED+1];

struct state_pos
{
    short posx,posy,speedx,speedy;

    state_pos(short px=0,short py=0,short sx=0,short sy=0):posx(px),posy(py),speedx(sx),speedy(sy){}

    bool visited()
    {
        return visited_states[posx][posy][speedx+MAX_SPEED][speedy+MAX_SPEED];
    }

    void visit()
    {
        visited_states[posx][posy][speedx+MAX_SPEED][speedy+MAX_SPEED]=true;
    }

    bool valid_speed_change(int d_vx,int d_vy,state_pos& next_state)
    {
        int deltax=d_vx;
        int deltay=d_vy;

        int new_sx=speedx+deltax;
        int new_sy=speedy+deltay;

        int positivity_x=new_sx>0?1:-1;
        int positivity_y=new_sy>0?1:-1;

        int endx=posx+new_sx;
        int endy=posy+new_sy;

        next_state=state_pos(endx,endy,new_sx,new_sy);

        /* Test 1 */
        if(abs(new_sx)>MAX_SPEED||abs(new_sy)>MAX_SPEED) return false;

        /* Test 2 */
        if(endx>xmax||endx<0||endy>ymax||endy<0) return false;

        /* Test 3 */
        if(next_state.visited()) return false;
        next_state.visit();

        /* Test 4 */

        if(new_sx==0)
        {
            for(int dy=0;abs(dy)<=abs(new_sy);dy+=positivity_y)
            {
                if(restricted[posx][posy+dy]) return false;
            }
        }
        else
        {
            for(int dx=0;abs(dx)<=abs(new_sx);dx+=positivity_x)
            {
                if((new_sy*dx)%new_sx==0&&restricted[posx+dx][posy+(new_sy*dx)/new_sx]) return false;
            }
        }

        return true;
    }

    bool at_end(const state_pos& other)
    {
        return posx==other.posx&&posy==other.posy&&speedx==other.speedx&&speedy==other.speedy;
    }
};

void test1()
{
    xmax=ymax=20;

    restricted[11][11]=true;
    restricted[9][7]=true;

    state_pos p0(10,10, 2, 1), p1;
    bool res=p0.valid_speed_change(0,1,p1);

    p0.speedx=-2;
    p0.speedy=-3;
    res=p0.valid_speed_change(-1,0,p1);
    res=p0.valid_speed_change(1,0,p1);
}

int main()
{
    //test1();
    char test_dat[]=
    "0 4 0 "
    "0 4 "
    "0 0";

    int resn;
    int xs,xe,ys,ye;

    scanf("%d%d%d%d%d%d%d",&xmax,&ymax,&resn,&xs,&ys,&xe,&ye);
    //sscanf(test_dat,"%d%d%d%d%d%d%d",&xmax,&ymax,&resn,&xs,&ys,&xe,&ye);

    int tempx,tempy;
    for(int loop=0;loop<resn;++loop)
    {
        scanf("%d%d",&tempx,&tempy);
        //sscanf(test_dat,"%d%d",&tempx,&tempy);
        restricted[tempx][tempy]=true;
    }

    vector<state_pos> last_step;

    state_pos start_state(xs,ys,0,0);
    start_state.visit();
    last_step.push_back(start_state);

    state_pos end_state(xe,ye,0,0);
    state_pos next_state;

    int step;

    for(step=0;;++step)
    {
        if(last_step.empty()) break;

        vector<state_pos> current_step;

        for(state_pos& sp : last_step)
        {
            if (sp.at_end(end_state))
            {
                printf("%d\n",step);
                return 0;
            }

            for(int xac=-1;xac<=1;++xac)
            {
                if(sp.valid_speed_change(xac,0,next_state)) current_step.push_back(next_state);
            }
            for(int yac=-1;yac<=1;++yac)
            {
                if(sp.valid_speed_change(0,yac,next_state)) current_step.push_back(next_state);
            }
        }

        last_step.swap(current_step);
    }

    puts("-1");
}